---------------------------------------------------------------------------------------
--Q1 Display all columns for all transactions. 
--Expected output: All columns

select *
FROM
  "PRACTICAL_1"."DATASET"."RETAIL_SALES";

---------------------------------------------------------------------------------------
--Q2. Display only the Transaction ID, Date, and Customer ID for all records. 
--Expected output: Transaction ID, Date, Customer ID

SELECT Transaction_id,Date,Customer_id
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";
----------------------------------------------------------------------------------------

--Q3. Display all the distinct product categories in the dataset. 
--Expected output: Product Category
SELECT distinct 
product_category
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";
----------------------------------------------------------------------------------------
--Q4. Display all the distinct gender values in the dataset. 
--Expected output: Gender 

SELECT Distinct
gender
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";
----------------------------------------------------------------------------------------
--Q5. Display all transactions where the Age is greater than 40. 
--Expected output: All columns 
SELECT *
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
where age>40;
---------------------------------------------------------------------------------------
--Q6. Display all transactions where the Price per Unit is between 100 and 500. 
--Expected output: All columns
SELECT *
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
Where price_per_unit BETWEEN 100 AND 500;
----------------------------------------------------------------------------------------

--Q7. Display all transactions where the Product Category is either 'Beauty' or 
--'Electronics'. 
--Expected output: All columns

SELECT *
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
WHERE product_category IN('Beauty','Electronics');
-----------------------------------------------------------------------------------------

--Q8. Display all transactions where the Product Category is not 'Clothing'. 
--Expected output: All columns

SELECT *
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
WHERE PRODUCT_CATEGORY <> 'Clothing';
---------------------------------------------------------------------------------------------

--Q9. Display all transactions where the Quantity is greater than or equal to 3. 
--Expected output: All columns
SELECT *
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
WHERE QUANTITY >= 3;
---------------------------------------------------------------------------------------------


--Q10. Count the total number of transactions. 
--Expected output: Total_Transactions 

SELECT COUNT(*)  total_transactions
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";
-------------------------------------------------------------------------------------------------

--Q11. Find the average Age of customers. 
--Expected output: Average_Age

select avg(age)as average_age
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";
--------------------------------------------------------------------------------------------------


--Q12. Find the total quantity of products sold. 
--Expected output: Total_Quantity 

SELECT SUM(quantity)as total_quantity
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";
--------------------------------------------------------------------------------------------------

--Q13. Find the maximum Total Amount spent in a single transaction. 
--Expected output: Max_Total_Amount

select max(TOTAL_amount) as max_total_amount
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";
----------------------------------------------------------------------------------------------------


--Q14. Find the minimum Price per Unit in the dataset. 
--Expected output: Min_Price_per_Unit 
SELECT MIN(Price_per_Unit) as Min_Price_per_Unit
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";


----------------------------------------------------------------------------------------------------

--Q15. Find the number of transactions per Product Category. 
--Expected output: Product Category, Transaction_Count 

SELECT Product_Category, COUNT(*) AS Transaction_Count
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
GROUP BY Product_Category;

-------------------------------------------------------------------------------------------------------

--Q16. Find the total revenue (Total Amount) per gender. 
--Expected output: Gender, Total_Revenue

SELECT GENDER, Count(*) as total_Amount
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
GROUP BY GENDER;

------------------------------------------------------------------------------------------------------
--Q17. Find the average Price per Unit per product category. 
--Expected output: Product Category, Average_Price 

SELECT Product_Category, AVG(Price_per_Unit) AS Average_Price
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
GROUP BY Product_Category;
--------------------------------------------------------------------------------------------------------

--Q18. Find the total revenue per product category where total revenue is greater than 
--10,000. 
--Expected output: Product Category, Total_Revenue 

SELECT 
    Product_Category, 
    SUM(Quantity * Price_per_Unit) AS Total_Revenue
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
GROUP BY Product_Category
HAVING SUM(Quantity * Price_per_Unit) > 10000;

-----------------------------------------------------------------------------------------------------------


--Q19. Find the average quantity per product category where the average is more than 2. 
--Expected output: Product Category, Average_Quantity

SELECT 
    Product_Category, 
    AVG(Quantity) AS Average_Quantity
FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES"
GROUP BY Product_Category
HAVING AVG(Quantity) > 2;

--------------------------------------------------------------------------------------------------------------


--Q20. Display a column called Spending_Level that shows 'High' if Total Amount > 1000, 
--otherwise 'Low'. 
--Expected output: Transaction ID, Total Amount, Spending_Level

Select transaction_id,total_amount,
case 
   WHEN total_amount > 1000 then 'high'
    else 'low'
   end as spending_level
  FROM "PRACTICAL_1"."DATASET"."RETAIL_SALES";

  -------------------------------------------------------------------------------------------------------------

  --Q21. Display a new column called Age_Group that labels customers as: 
--• 'Youth' if Age < 30 
--• 'Adult' if Age is between 30 and 59 
--• 'Senior' if Age >= 60 
--Expected output: Customer ID, Age, Age_Group

SELECT customer_id,age,
case 
when age <30 Then 'youth'
when age between 30 and 59 Then 'Adult'
when age >= 60 then 'senior'
end as age_group
from "PRACTICAL_1"."DATASET"."RETAIL_SALES";

